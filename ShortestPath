# Python3 code for creating the shortest path between vertices
# Keep in mind the graph is weighted and undirected, we will use Dijkstra's algorithm and the adjacency matrix
# to find the shortest path in the graph
import sys

# First we must define the adjacency matrix that we want to use, we will use the matrix from example one
adjacency_matrix = [
    [0, 5, 0, 5, 0, 0, 10],
    [5, 0, 0, 20, 10, 0, 0],
    [0, 0, 0, 0, 15, 1, 0],
    [5, 20, 0, 0, 0, 0, 0],
    [0, 10, 15, 0, 0, 30, 0],
    [0, 0, 1, 0, 30, 0, 25],
    [10, 0, 0, 0, 0, 25, 0]
]

class shortestPaths:
    # at our starting vertex (node) there is no previous or parent so
    NO_PREVIOUS = -1
    shortest_path = []
    queue = []
    distance = queue

def shortest_path(current, adjacency_matrix, start, final):
    x = len(adjacency_matrix[0])
    shortest = []
    visited = []
    previous = []
    for v in range(0, x, 1):
        shortest[x] = sys.maxsize
        visited[x] = False
    shortest[start] = 0
    previous[start] = start.NO_PREVIOUS
    for i in range(1, x, 1):
        pre = -1
        min